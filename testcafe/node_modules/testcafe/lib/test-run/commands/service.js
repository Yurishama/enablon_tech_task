"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetActiveElementCommand = exports.UnlockPageCommand = exports.BackupStoragesCommand = exports.TestDoneCommand = exports.SetBreakpointCommand = exports.HideAssertionRetriesStatusCommand = exports.ShowAssertionRetriesStatusCommand = void 0;
const type_1 = __importDefault(require("./type"));
// Commands
class ShowAssertionRetriesStatusCommand {
    constructor(timeout) {
        this.type = type_1.default.showAssertionRetriesStatus;
        this.timeout = timeout;
    }
}
exports.ShowAssertionRetriesStatusCommand = ShowAssertionRetriesStatusCommand;
class HideAssertionRetriesStatusCommand {
    constructor(success) {
        this.type = type_1.default.hideAssertionRetriesStatus;
        this.success = success;
    }
}
exports.HideAssertionRetriesStatusCommand = HideAssertionRetriesStatusCommand;
class SetBreakpointCommand {
    constructor(isTestError, selector) {
        this.type = type_1.default.setBreakpoint;
        this.isTestError = isTestError;
        this.selector = selector;
    }
}
exports.SetBreakpointCommand = SetBreakpointCommand;
class TestDoneCommand {
    constructor() {
        this.type = type_1.default.testDone;
    }
}
exports.TestDoneCommand = TestDoneCommand;
class BackupStoragesCommand {
    constructor() {
        this.type = type_1.default.backupStorages;
    }
}
exports.BackupStoragesCommand = BackupStoragesCommand;
class UnlockPageCommand {
    constructor() {
        this.type = type_1.default.unlockPage;
    }
}
exports.UnlockPageCommand = UnlockPageCommand;
class GetActiveElementCommand {
    constructor() {
        this.type = type_1.default.getActiveElement;
    }
}
exports.GetActiveElementCommand = GetActiveElementCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0LXJ1bi9jb21tYW5kcy9zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQixXQUFXO0FBQ1gsTUFBYSxpQ0FBaUM7SUFDMUMsWUFBYSxPQUFPO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQU0sY0FBSSxDQUFDLDBCQUEwQixDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQUxELDhFQUtDO0FBRUQsTUFBYSxpQ0FBaUM7SUFDMUMsWUFBYSxPQUFPO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQU0sY0FBSSxDQUFDLDBCQUEwQixDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQUxELDhFQUtDO0FBRUQsTUFBYSxvQkFBb0I7SUFDN0IsWUFBYSxXQUFXLEVBQUUsUUFBUTtRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFVLGNBQUksQ0FBQyxhQUFhLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLFFBQVEsR0FBTSxRQUFRLENBQUM7SUFDaEMsQ0FBQztDQUNKO0FBTkQsb0RBTUM7QUFFRCxNQUFhLGVBQWU7SUFDeEI7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQUksQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBSkQsMENBSUM7QUFFRCxNQUFhLHFCQUFxQjtJQUM5QjtRQUNJLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBSSxDQUFDLGNBQWMsQ0FBQztJQUNwQyxDQUFDO0NBQ0o7QUFKRCxzREFJQztBQUVELE1BQWEsaUJBQWlCO0lBQzFCO1FBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxjQUFJLENBQUMsVUFBVSxDQUFDO0lBQ2hDLENBQUM7Q0FDSjtBQUpELDhDQUlDO0FBRUQsTUFBYSx1QkFBdUI7SUFDaEM7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUN0QyxDQUFDO0NBQ0o7QUFKRCwwREFJQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUWVBFIGZyb20gJy4vdHlwZSc7XG5cbi8vIENvbW1hbmRzXG5leHBvcnQgY2xhc3MgU2hvd0Fzc2VydGlvblJldHJpZXNTdGF0dXNDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvciAodGltZW91dCkge1xuICAgICAgICB0aGlzLnR5cGUgICAgPSBUWVBFLnNob3dBc3NlcnRpb25SZXRyaWVzU3RhdHVzO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEhpZGVBc3NlcnRpb25SZXRyaWVzU3RhdHVzQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKHN1Y2Nlc3MpIHtcbiAgICAgICAgdGhpcy50eXBlICAgID0gVFlQRS5oaWRlQXNzZXJ0aW9uUmV0cmllc1N0YXR1cztcbiAgICAgICAgdGhpcy5zdWNjZXNzID0gc3VjY2VzcztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRCcmVha3BvaW50Q29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKGlzVGVzdEVycm9yLCBzZWxlY3Rvcikge1xuICAgICAgICB0aGlzLnR5cGUgICAgICAgID0gVFlQRS5zZXRCcmVha3BvaW50O1xuICAgICAgICB0aGlzLmlzVGVzdEVycm9yID0gaXNUZXN0RXJyb3I7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IgICAgPSBzZWxlY3RvcjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUZXN0RG9uZUNvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVFlQRS50ZXN0RG9uZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYWNrdXBTdG9yYWdlc0NvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVFlQRS5iYWNrdXBTdG9yYWdlcztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmxvY2tQYWdlQ29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBUWVBFLnVubG9ja1BhZ2U7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2V0QWN0aXZlRWxlbWVudENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy50eXBlID0gVFlQRS5nZXRBY3RpdmVFbGVtZW50O1xuICAgIH1cbn1cbiJdfQ==