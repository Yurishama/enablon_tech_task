"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteSelectorCommand = exports.ExecuteClientFunctionCommand = exports.ExecuteClientFunctionCommandBase = void 0;
const type_1 = __importDefault(require("./type"));
const base_1 = require("./base");
class ExecuteClientFunctionCommandBase extends base_1.ActionCommandBase {
    constructor(obj, testRun, type) {
        super(obj, testRun, type, false);
    }
    getAssignableProperties() {
        return [
            { name: 'instantiationCallsiteName', defaultValue: '' },
            { name: 'fnCode', defaultValue: '' },
            { name: 'args', defaultValue: [] },
            { name: 'dependencies', defaultValue: [] },
        ];
    }
}
exports.ExecuteClientFunctionCommandBase = ExecuteClientFunctionCommandBase;
class ExecuteClientFunctionCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.executeClientFunction);
    }
}
exports.ExecuteClientFunctionCommand = ExecuteClientFunctionCommand;
ExecuteClientFunctionCommand.methodName = type_1.default.executeClientFunction;
class ExecuteSelectorCommand extends ExecuteClientFunctionCommandBase {
    constructor(obj, testRun) {
        super(obj, testRun, type_1.default.executeSelector);
    }
    getAssignableProperties() {
        return [
            { name: 'visibilityCheck', defaultValue: false },
            { name: 'timeout', defaultValue: null },
            { name: 'apiFnChain' },
            { name: 'needError' },
            { name: 'index', defaultValue: 0 },
            { name: 'strictError' },
        ];
    }
}
exports.ExecuteSelectorCommand = ExecuteSelectorCommand;
ExecuteSelectorCommand.methodName = type_1.default.executeSelector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZS1jbGllbnQtZnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdC1ydW4vY29tbWFuZHMvZXhlY3V0ZS1jbGllbnQtZnVuY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0RBQTBCO0FBQzFCLGlDQUEyQztBQUUzQyxNQUFhLGdDQUFpQyxTQUFRLHdCQUFpQjtJQUNuRSxZQUFhLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSTtRQUMzQixLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELHVCQUF1QjtRQUNuQixPQUFPO1lBQ0gsRUFBRSxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtZQUN2RCxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtZQUNwQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtZQUNsQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRTtTQUM3QyxDQUFDO0lBQ04sQ0FBQztDQUNKO0FBYkQsNEVBYUM7QUFFRCxNQUFhLDRCQUE2QixTQUFRLGdDQUFnQztJQUc5RSxZQUFhLEdBQUcsRUFBRSxPQUFPO1FBQ3JCLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLGNBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3BELENBQUM7O0FBTEwsb0VBTUM7QUFMVSx1Q0FBVSxHQUFHLGNBQUksQ0FBQyxxQkFBcUIsQ0FBQztBQU9uRCxNQUFhLHNCQUF1QixTQUFRLGdDQUFnQztJQUd4RSxZQUFhLEdBQUcsRUFBRSxPQUFPO1FBQ3JCLEtBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLGNBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsdUJBQXVCO1FBQ25CLE9BQU87WUFDSCxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFO1lBQ2hELEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFO1lBQ3ZDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUN0QixFQUFFLElBQUksRUFBRSxXQUFXLEVBQUU7WUFDckIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDLEVBQUU7WUFDbEMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFO1NBQzFCLENBQUM7SUFDTixDQUFDOztBQWhCTCx3REFpQkM7QUFoQlUsaUNBQVUsR0FBRyxjQUFJLENBQUMsZUFBZSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRZUEUgZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IEFjdGlvbkNvbW1hbmRCYXNlIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNsYXNzIEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmRCYXNlIGV4dGVuZHMgQWN0aW9uQ29tbWFuZEJhc2Uge1xuICAgIGNvbnN0cnVjdG9yIChvYmosIHRlc3RSdW4sIHR5cGUpIHtcbiAgICAgICAgc3VwZXIob2JqLCB0ZXN0UnVuLCB0eXBlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZ2V0QXNzaWduYWJsZVByb3BlcnRpZXMgKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgeyBuYW1lOiAnaW5zdGFudGlhdGlvbkNhbGxzaXRlTmFtZScsIGRlZmF1bHRWYWx1ZTogJycgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2ZuQ29kZScsIGRlZmF1bHRWYWx1ZTogJycgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2FyZ3MnLCBkZWZhdWx0VmFsdWU6IFtdIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdkZXBlbmRlbmNpZXMnLCBkZWZhdWx0VmFsdWU6IFtdIH0sXG4gICAgICAgIF07XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZCBleHRlbmRzIEV4ZWN1dGVDbGllbnRGdW5jdGlvbkNvbW1hbmRCYXNlIHtcbiAgICBzdGF0aWMgbWV0aG9kTmFtZSA9IFRZUEUuZXhlY3V0ZUNsaWVudEZ1bmN0aW9uO1xuXG4gICAgY29uc3RydWN0b3IgKG9iaiwgdGVzdFJ1bikge1xuICAgICAgICBzdXBlcihvYmosIHRlc3RSdW4sIFRZUEUuZXhlY3V0ZUNsaWVudEZ1bmN0aW9uKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFeGVjdXRlU2VsZWN0b3JDb21tYW5kIGV4dGVuZHMgRXhlY3V0ZUNsaWVudEZ1bmN0aW9uQ29tbWFuZEJhc2Uge1xuICAgIHN0YXRpYyBtZXRob2ROYW1lID0gVFlQRS5leGVjdXRlU2VsZWN0b3I7XG5cbiAgICBjb25zdHJ1Y3RvciAob2JqLCB0ZXN0UnVuKSB7XG4gICAgICAgIHN1cGVyKG9iaiwgdGVzdFJ1biwgVFlQRS5leGVjdXRlU2VsZWN0b3IpO1xuICAgIH1cblxuICAgIGdldEFzc2lnbmFibGVQcm9wZXJ0aWVzICgpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgbmFtZTogJ3Zpc2liaWxpdHlDaGVjaycsIGRlZmF1bHRWYWx1ZTogZmFsc2UgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ3RpbWVvdXQnLCBkZWZhdWx0VmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ2FwaUZuQ2hhaW4nIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICduZWVkRXJyb3InIH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdpbmRleCcsIGRlZmF1bHRWYWx1ZTogMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnc3RyaWN0RXJyb3InIH0sXG4gICAgICAgIF07XG4gICAgfVxufVxuIl19