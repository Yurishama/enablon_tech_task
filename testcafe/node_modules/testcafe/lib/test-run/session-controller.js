"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const _1 = __importDefault(require("./"));
const ACTIVE_SESSIONS_MAP = {};
const UPLOADS_DIR_NAME = '_uploads_';
// NOTE: Native Automation cookie implementation doesn't require client-server communication.
// This stub was created to reduce conditional logic in connected classes.
class NativeAutomationCookieStub {
    getClientString() {
        return '';
    }
    takePendingSyncCookies() {
        return [];
    }
}
class SessionController extends testcafe_hammerhead_1.Session {
    constructor(uploadRoots, options) {
        super(uploadRoots, options);
        this.currentTestRun = null;
    }
    // Hammerhead payload
    async getPayloadScript(windowId) {
        return this.currentTestRun.getPayloadScript(windowId);
    }
    async getIframePayloadScript() {
        return this.currentTestRun.getIframePayloadScript();
    }
    // Hammerhead handlers
    handleServiceMessage(msg, serverInfo) {
        if (this.currentTestRun[msg.cmd])
            return super.handleServiceMessage.call(this.currentTestRun, msg, serverInfo);
        return super.handleServiceMessage(msg, serverInfo);
    }
    getAuthCredentials() {
        return this.currentTestRun.getAuthCredentials();
    }
    handleFileDownload() {
        return this.currentTestRun.handleFileDownload();
    }
    handleAttachment(data) {
        return this.currentTestRun.handleAttachment(data);
    }
    handlePageError(ctx, err) {
        return this.currentTestRun.handlePageError(ctx, err);
    }
    createCookies() {
        return this.options.nativeAutomation ? new NativeAutomationCookieStub() : super.createCookies();
    }
    // API
    static getSession(testRun) {
        let sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        if (!sessionInfo || !testRun.disablePageReloads) {
            if (sessionInfo && sessionInfo.url)
                SessionController.closeSession(testRun);
            let session = null;
            if (testRun.test.isLegacy)
                session = testRun;
            else {
                const fixtureDir = path_1.default.dirname(testRun.test.fixture.path);
                const uploadRoots = [
                    path_1.default.resolve(UPLOADS_DIR_NAME),
                    path_1.default.resolve(fixtureDir, UPLOADS_DIR_NAME),
                    fixtureDir,
                ];
                const options = {
                    disablePageCaching: testRun.disablePageCaching,
                    allowMultipleWindows: _1.default.isMultipleWindowsAllowed(testRun),
                    requestTimeout: testRun.requestTimeout,
                    nativeAutomation: testRun.isNativeAutomation,
                };
                if (options.allowMultipleWindows)
                    options.windowId = testRun.browserConnection.activeWindowId;
                session = new SessionController(uploadRoots, options);
                session.currentTestRun = testRun;
            }
            sessionInfo = {
                session: session,
                proxy: null,
                url: null,
            };
            ACTIVE_SESSIONS_MAP[testRun.browserConnection.id] = sessionInfo;
        }
        else if (!testRun.test.isLegacy)
            sessionInfo.session.currentTestRun = testRun;
        return sessionInfo.session;
    }
    static getSessionUrl(testRun, proxy) {
        let sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        if (!sessionInfo || testRun.test.isLegacy) {
            SessionController.getSession(testRun);
            sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        }
        if (!sessionInfo.url) {
            const pageUrl = testRun.test.pageUrl;
            const externalProxyHost = testRun.opts.proxy;
            let externalProxySettings = null;
            if (externalProxyHost) {
                externalProxySettings = {
                    url: externalProxyHost,
                    bypassRules: testRun.opts.proxyBypass,
                };
            }
            sessionInfo.proxy = proxy;
            sessionInfo.url = proxy.openSession(pageUrl, sessionInfo.session, externalProxySettings);
        }
        return sessionInfo.url;
    }
    static closeSession(testRun) {
        const sessionInfo = ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
        if (!sessionInfo || !sessionInfo.url || !sessionInfo.proxy)
            return;
        sessionInfo.proxy.closeSession(sessionInfo.session);
        delete ACTIVE_SESSIONS_MAP[testRun.browserConnection.id];
    }
}
exports.default = SessionController;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,