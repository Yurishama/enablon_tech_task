"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const load_assets_1 = __importDefault(require("../../../load-assets"));
const http_1 = require("../../../utils/http");
const remotes_queue_1 = __importDefault(require("../remotes-queue"));
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const service_routes_1 = __importDefault(require("../service-routes"));
const empty_page_markup_1 = __importDefault(require("../../../native-automation/empty-page-markup"));
const error_route_1 = __importDefault(require("../../../native-automation/error-route"));
const initializers_1 = require("../../../test-run/commands/validations/initializers");
const status_1 = __importDefault(require("./status"));
const events_1 = require("events");
const DEFAULT_BROWSER_CONNECTION_GATEWAY_OPTIONS = {
    retryTestPages: false,
};
class BrowserConnectionGateway extends events_1.EventEmitter {
    constructor(proxy, options) {
        super();
        this._connections = {};
        this._remotesQueue = new remotes_queue_1.default();
        this.connectUrl = '';
        this._options = this._calculateResultOptions(options);
        this.proxy = proxy;
        this._status = status_1.default.uninitialized;
    }
    _calculateResultOptions(options) {
        return Object.assign({}, DEFAULT_BROWSER_CONNECTION_GATEWAY_OPTIONS, options);
    }
    _dispatch(url, proxy, handler, method = 'GET') {
        // @ts-ignore Need to improve typings of the 'testcafe-hammerhead' module
        proxy[method](url, (req, res, serverInfo, params) => {
            const connection = this._connections[params.id];
            (0, http_1.preventCaching)(res);
            (0, testcafe_hammerhead_1.acceptCrossOrigin)(res);
            if (connection)
                handler(req, res, connection);
            else
                (0, http_1.respond404)(res);
        });
    }
    _registerRoutes(proxy) {
        const { idlePageScript, idlePageStyle, idlePageLogo, serviceWorkerScript, } = (0, load_assets_1.default)();
        this._dispatch(`${service_routes_1.default.connect}/{id}`, proxy, BrowserConnectionGateway._onConnection);
        this._dispatch(`${service_routes_1.default.heartbeat}/{id}`, proxy, BrowserConnectionGateway._onHeartbeat, 'GET');
        this._dispatch(`${service_routes_1.default.idle}/{id}`, proxy, BrowserConnectionGateway._onIdle);
        this._dispatch(`${service_routes_1.default.idleForced}/{id}`, proxy, BrowserConnectionGateway._onIdleForced);
        this._dispatch(`${service_routes_1.default.status}/{id}`, proxy, BrowserConnectionGateway._onStatusRequest);
        this._dispatch(`${service_routes_1.default.statusDone}/{id}`, proxy, BrowserConnectionGateway._onStatusRequestOnTestDone, 'GET');
        this._dispatch(`${service_routes_1.default.initScript}/{id}`, proxy, BrowserConnectionGateway._onInitScriptRequest);
        this._dispatch(`${service_routes_1.default.initScript}/{id}`, proxy, BrowserConnectionGateway._onInitScriptResponse, 'POST');
        this._dispatch(`${service_routes_1.default.activeWindowId}/{id}`, proxy, BrowserConnectionGateway._onGetActiveWindowIdRequest, 'GET');
        this._dispatch(`${service_routes_1.default.activeWindowId}/{id}`, proxy, BrowserConnectionGateway._onSetActiveWindowIdRequest, 'POST');
        this._dispatch(`${service_routes_1.default.ensureWindowInNativeAutomation}/{id}`, proxy, BrowserConnectionGateway._ensureWindowInNativeAutomation, 'POST');
        this._dispatch(`${service_routes_1.default.closeWindow}/{id}`, proxy, BrowserConnectionGateway._onCloseWindowRequest, 'POST');
        this._dispatch(`${service_routes_1.default.openFileProtocol}/{id}`, proxy, BrowserConnectionGateway._onOpenFileProtocolRequest, 'POST');
        this._dispatch(`${service_routes_1.default.dispatchNativeAutomationEvent}/{id}`, proxy, BrowserConnectionGateway._onDispatchNativeAutomationEvent, 'POST');
        this._dispatch(`${service_routes_1.default.parseSelector}/{id}`, proxy, BrowserConnectionGateway._parseSelector, 'POST');
        this._dispatch(`${service_routes_1.default.dispatchNativeAutomationEventSequence}/{id}`, proxy, BrowserConnectionGateway._onDispatchNativeAutomationEventSequence, 'POST');
        proxy.GET(service_routes_1.default.connect, (req, res) => this._connectNextRemoteBrowser(req, res));
        proxy.GET(service_routes_1.default.connectWithTrailingSlash, (req, res) => this._connectNextRemoteBrowser(req, res));
        proxy.GET(service_routes_1.default.serviceWorker, { content: serviceWorkerScript, contentType: 'application/x-javascript' });
        proxy.GET(service_routes_1.default.assets.index, { content: idlePageScript, contentType: 'application/x-javascript' });
        proxy.GET(service_routes_1.default.assets.styles, { content: idlePageStyle, contentType: 'text/css' });
        proxy.GET(service_routes_1.default.assets.logo, { content: idlePageLogo, contentType: 'image/svg+xml' });
        proxy.GET(error_route_1.default, (req, res) => {
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(empty_page_markup_1.default);
        });
    }
    // Helpers
    static _ensureConnectionReady(res, connection) {
        if (!connection.isReady()) {
            (0, http_1.respond500)(res, 'The connection is not ready yet.');
            return false;
        }
        return true;
    }
    static _fetchRequestData(req, callback) {
        let data = '';
        req.on('data', chunk => {
            data += chunk;
        });
        req.on('end', () => {
            callback(data.toString());
        });
    }
    // Route handlers
    static async _onConnection(req, res, connection) {
        if (connection.isReady())
            (0, http_1.respond500)(res, 'The connection is already established.');
        else {
            const userAgent = req.headers['user-agent'];
            await connection.establish(userAgent);
            (0, http_1.redirect)(res, connection.idleUrl);
        }
    }
    static _onHeartbeat(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            const status = connection.heartbeat();
            (0, http_1.respondWithJSON)(res, status);
        }
    }
    static _onIdle(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection))
            res.end(connection.renderIdlePage());
    }
    static async _onIdleForced(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            const status = await connection.getStatus(true);
            (0, http_1.redirect)(res, status.url);
        }
    }
    static async _onStatusRequest(req, res, connection) {
        return BrowserConnectionGateway._onStatusRequestCore(req, res, connection, false);
    }
    static async _onStatusRequestOnTestDone(req, res, connection) {
        return BrowserConnectionGateway._onStatusRequestCore(req, res, connection, true);
    }
    static async _onStatusRequestCore(req, res, connection, isTestDone) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            const status = await connection.getStatus(isTestDone);
            (0, http_1.respondWithJSON)(res, status);
        }
    }
    static _onInitScriptRequest(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            const script = connection.getInitScript();
            (0, http_1.respondWithJSON)(res, script);
        }
    }
    static _onInitScriptResponse(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, data => {
                connection.handleInitScriptResult(data);
                res.end();
            });
        }
    }
    static _onGetActiveWindowIdRequest(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            (0, http_1.respondWithJSON)(res, {
                activeWindowId: connection.activeWindowId,
            });
        }
    }
    static async _ensureWindowInNativeAutomation(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, async (data) => {
                const windowId = await connection.getNewWindowIdInNativeAutomation(JSON.parse(data).windowId);
                (0, http_1.respondWithJSON)(res, { windowId });
            });
        }
    }
    static _onSetActiveWindowIdRequest(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, data => {
                const parsedData = JSON.parse(data);
                connection.activeWindowId = parsedData.windowId;
                (0, http_1.respondWithJSON)(res);
            });
        }
    }
    static _onCloseWindowRequest(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            connection.provider.closeBrowserChildWindow(connection.id)
                .then(() => {
                (0, http_1.respondWithJSON)(res);
            });
        }
    }
    static _onOpenFileProtocolRequest(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, data => {
                const parsedData = JSON.parse(data);
                connection.openFileProtocol(parsedData.url)
                    .then(() => {
                    (0, http_1.respondWithJSON)(res);
                });
            });
        }
    }
    static _onDispatchNativeAutomationEvent(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, data => {
                const { type, options } = JSON.parse(data);
                connection.dispatchNativeAutomationEvent(type, options)
                    .then(() => {
                    (0, http_1.respondWithJSON)(res);
                });
            });
        }
    }
    static _onDispatchNativeAutomationEventSequence(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, data => {
                const eventSequence = JSON.parse(data);
                connection.dispatchNativeAutomationEventSequence(eventSequence)
                    .then(() => {
                    (0, http_1.respondWithJSON)(res);
                });
            });
        }
    }
    async _connectNextRemoteBrowser(req, res) {
        (0, http_1.preventCaching)(res);
        const remoteConnection = await this._remotesQueue.shift();
        if (remoteConnection)
            (0, http_1.redirect)(res, remoteConnection.url);
        else
            (0, http_1.respond500)(res, 'There are no available _connections to establish.');
    }
    static _getParsedSelector(testRun, rawSelector) {
        const options = {
            testRun,
            skipVisibilityCheck: true,
            collectionMode: true,
        };
        const value = rawSelector.trim().startsWith('Selector(') ? rawSelector : `'${rawSelector}'`;
        const selector = { type: 'js-expr', value };
        return (0, initializers_1.initSelector)('selector', selector, options);
    }
    static _parseSelector(req, res, connection) {
        if (BrowserConnectionGateway._ensureConnectionReady(res, connection)) {
            BrowserConnectionGateway._fetchRequestData(req, data => {
                try {
                    const testRun = connection.getCurrentTestRun();
                    const rawSelector = JSON.parse(data).selector;
                    const parsedSelector = BrowserConnectionGateway._getParsedSelector(testRun, rawSelector);
                    (0, http_1.respondWithJSON)(res, parsedSelector);
                }
                catch (error) {
                    (0, http_1.respondWithJSON)(res);
                }
            });
        }
    }
    // API
    startServingConnection(connection) {
        this._connections[connection.id] = connection;
        if (connection.browserInfo.providerName === 'remote')
            this._remotesQueue.add(connection);
    }
    stopServingConnection(connection) {
        delete this._connections[connection.id];
        if (connection.browserInfo.providerName === 'remote')
            this._remotesQueue.remove(connection);
    }
    async close() {
        for (const id in this._connections)
            await this._connections[id].close();
        this.proxy.close();
    }
    getConnections() {
        return this._connections;
    }
    get status() {
        return this._status;
    }
    get retryTestPages() {
        return this._options.retryTestPages;
    }
    initialize(options) {
        // NOTE: Initialize only once in case of multiple runners.
        if (this._status === status_1.default.initialized)
            return;
        this.proxy.start(options);
        this._registerRoutes(this.proxy);
        this.connectUrl = this.proxy.resolveRelativeServiceUrl(service_routes_1.default.connect);
        this._status = status_1.default.initialized;
        this.emit('initialized');
    }
}
exports.default = BrowserConnectionGateway;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,