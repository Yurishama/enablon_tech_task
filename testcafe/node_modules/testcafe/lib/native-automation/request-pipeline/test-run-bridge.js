"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const connection_1 = __importDefault(require("../../browser/connection"));
class TestRunBridge {
    constructor(browserId, windowId) {
        this._browserId = browserId;
        this._windowId = windowId;
    }
    getBrowserConnection() {
        return connection_1.default.getById(this._browserId);
    }
    getCurrentTestRun() {
        const browserConnection = this.getBrowserConnection();
        return browserConnection.getCurrentTestRun();
    }
    getSessionId() {
        var _a;
        return ((_a = this.getCurrentTestRun()) === null || _a === void 0 ? void 0 : _a.id) || '';
    }
    getUserScripts() {
        const currentTestRun = this.getCurrentTestRun();
        if (!currentTestRun)
            return [];
        return currentTestRun.injectable.userScripts;
    }
    getInjectableScripts() {
        const currentTestRun = this.getCurrentTestRun();
        if (!currentTestRun)
            return [];
        return currentTestRun.injectable.scripts;
    }
    getInjectableStyles() {
        const currentTestRun = this.getCurrentTestRun();
        if (!currentTestRun)
            return [];
        return currentTestRun.injectable.styles;
    }
    async getTaskScript({ isIframe }) {
        const browserConnection = this.getBrowserConnection();
        const proxy = browserConnection.browserConnectionGateway.proxy;
        const windowId = this._windowId;
        // @ts-ignore
        return await this.getCurrentTestRun().session.getTaskScript({
            referer: '',
            cookieUrl: '',
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
            isIframe,
        });
    }
}
exports.default = TestRunBridge;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tYnJpZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25hdGl2ZS1hdXRvbWF0aW9uL3JlcXVlc3QtcGlwZWxpbmUvdGVzdC1ydW4tYnJpZGdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsMEVBQXlEO0FBSXpELE1BQXFCLGFBQWE7SUFHOUIsWUFBb0IsU0FBaUIsRUFBRSxRQUFnQjtRQUNuRCxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM5QixDQUFDO0lBRU0sb0JBQW9CO1FBQ3ZCLE9BQU8sb0JBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQXNCLENBQUM7SUFDM0UsQ0FBQztJQUVNLGlCQUFpQjtRQUNwQixNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBRXRELE9BQU8saUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRU0sWUFBWTs7UUFDZixPQUFPLENBQUEsTUFBQSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsMENBQUUsRUFBRSxLQUFJLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0lBRU0sY0FBYztRQUNqQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUVoRCxJQUFJLENBQUMsY0FBYztZQUNmLE9BQU8sRUFBRSxDQUFDO1FBRWQsT0FBTyxjQUFjLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQztJQUNqRCxDQUFDO0lBRU0sb0JBQW9CO1FBQ3ZCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRWhELElBQUksQ0FBQyxjQUFjO1lBQ2YsT0FBTyxFQUFFLENBQUM7UUFFZCxPQUFPLGNBQWMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO0lBQzdDLENBQUM7SUFFTSxtQkFBbUI7UUFDdEIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFaEQsSUFBSSxDQUFDLGNBQWM7WUFDZixPQUFPLEVBQUUsQ0FBQztRQUVkLE9BQU8sY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7SUFDNUMsQ0FBQztJQUVNLEtBQUssQ0FBQyxhQUFhLENBQUUsRUFBRSxRQUFRLEVBQThCO1FBQ2hFLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDdEQsTUFBTSxLQUFLLEdBQWUsaUJBQWlCLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDO1FBQzNFLE1BQU0sUUFBUSxHQUFZLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFekMsYUFBYTtRQUNiLE9BQU8sTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQ3hELE9BQU8sRUFBTSxFQUFFO1lBQ2YsU0FBUyxFQUFJLEVBQUU7WUFDZixXQUFXLEVBQUUsSUFBSTtZQUNqQixVQUFVLEVBQUcsS0FBSyxDQUFDLFdBQVc7WUFDOUIsUUFBUTtZQUNSLFFBQVE7U0FDWCxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFoRUQsZ0NBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlc3RSdW4gZnJvbSAnLi4vLi4vdGVzdC1ydW4nO1xuaW1wb3J0IEJyb3dzZXJDb25uZWN0aW9uIGZyb20gJy4uLy4uL2Jyb3dzZXIvY29ubmVjdGlvbic7XG5pbXBvcnQgeyBVc2VyU2NyaXB0IH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlUmVzb3VyY2VzT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdFJ1bkJyaWRnZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfYnJvd3NlcklkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfd2luZG93SWQ6IHN0cmluZztcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGJyb3dzZXJJZDogc3RyaW5nLCB3aW5kb3dJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2Jyb3dzZXJJZCA9IGJyb3dzZXJJZDtcbiAgICAgICAgdGhpcy5fd2luZG93SWQgPSB3aW5kb3dJZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QnJvd3NlckNvbm5lY3Rpb24gKCk6IEJyb3dzZXJDb25uZWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIEJyb3dzZXJDb25uZWN0aW9uLmdldEJ5SWQodGhpcy5fYnJvd3NlcklkKSBhcyBCcm93c2VyQ29ubmVjdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q3VycmVudFRlc3RSdW4gKCk6IFRlc3RSdW4ge1xuICAgICAgICBjb25zdCBicm93c2VyQ29ubmVjdGlvbiA9IHRoaXMuZ2V0QnJvd3NlckNvbm5lY3Rpb24oKTtcblxuICAgICAgICByZXR1cm4gYnJvd3NlckNvbm5lY3Rpb24uZ2V0Q3VycmVudFRlc3RSdW4oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2Vzc2lvbklkICgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VGVzdFJ1bigpPy5pZCB8fCAnJztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VXNlclNjcmlwdHMgKCk6IFVzZXJTY3JpcHRbXSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUZXN0UnVuID0gdGhpcy5nZXRDdXJyZW50VGVzdFJ1bigpO1xuXG4gICAgICAgIGlmICghY3VycmVudFRlc3RSdW4pXG4gICAgICAgICAgICByZXR1cm4gW107XG5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUZXN0UnVuLmluamVjdGFibGUudXNlclNjcmlwdHM7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEluamVjdGFibGVTY3JpcHRzICgpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUZXN0UnVuID0gdGhpcy5nZXRDdXJyZW50VGVzdFJ1bigpO1xuXG4gICAgICAgIGlmICghY3VycmVudFRlc3RSdW4pXG4gICAgICAgICAgICByZXR1cm4gW107XG5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUZXN0UnVuLmluamVjdGFibGUuc2NyaXB0cztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0SW5qZWN0YWJsZVN0eWxlcyAoKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGVzdFJ1biA9IHRoaXMuZ2V0Q3VycmVudFRlc3RSdW4oKTtcblxuICAgICAgICBpZiAoIWN1cnJlbnRUZXN0UnVuKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuXG4gICAgICAgIHJldHVybiBjdXJyZW50VGVzdFJ1bi5pbmplY3RhYmxlLnN0eWxlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0VGFza1NjcmlwdCAoeyBpc0lmcmFtZSB9OiBJbmplY3RhYmxlUmVzb3VyY2VzT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGJyb3dzZXJDb25uZWN0aW9uID0gdGhpcy5nZXRCcm93c2VyQ29ubmVjdGlvbigpO1xuICAgICAgICBjb25zdCBwcm94eSAgICAgICAgICAgICA9IGJyb3dzZXJDb25uZWN0aW9uLmJyb3dzZXJDb25uZWN0aW9uR2F0ZXdheS5wcm94eTtcbiAgICAgICAgY29uc3Qgd2luZG93SWQgICAgICAgICAgPSB0aGlzLl93aW5kb3dJZDtcblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEN1cnJlbnRUZXN0UnVuKCkuc2Vzc2lvbi5nZXRUYXNrU2NyaXB0KHtcbiAgICAgICAgICAgIHJlZmVyZXI6ICAgICAnJyxcbiAgICAgICAgICAgIGNvb2tpZVVybDogICAnJyxcbiAgICAgICAgICAgIHdpdGhQYXlsb2FkOiB0cnVlLFxuICAgICAgICAgICAgc2VydmVySW5mbzogIHByb3h5LnNlcnZlcjFJbmZvLFxuICAgICAgICAgICAgd2luZG93SWQsXG4gICAgICAgICAgICBpc0lmcmFtZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19