"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeAutomationChildWindow = exports.NativeAutomationMainWindow = exports.NativeAutomationBase = void 0;
const request_pipeline_1 = __importDefault(require("./request-pipeline"));
const add_custom_debug_formatters_1 = __importDefault(require("./add-custom-debug-formatters"));
const debug_loggers_1 = require("../utils/debug-loggers");
const session_storage_1 = __importDefault(require("./session-storage"));
const async_event_emitter_1 = __importDefault(require("../utils/async-event-emitter"));
const cdp_client_1 = require("../browser/provider/built-in/dedicated/chrome/cdp-client");
class NativeAutomationBase extends async_event_emitter_1.default {
    constructor(browserId, windowId, client, options, isMainWindow) {
        super();
        this.windowId = windowId;
        this._client = client;
        this.options = options;
        this.requestPipeline = new request_pipeline_1.default(browserId, windowId, client, isMainWindow, options);
        this.sessionStorage = new session_storage_1.default(browserId, client, options);
        (0, add_custom_debug_formatters_1.default)();
    }
    _onContextStorageSyncHandler({ sessionStorage, testRunId, frameDriverId }) {
        if (sessionStorage) {
            this.requestPipeline.contextStorage = this.requestPipeline.contextStorage || {};
            this.requestPipeline.contextStorage[testRunId] = this.requestPipeline.contextStorage[testRunId] || {};
            this.requestPipeline.contextStorage[testRunId][frameDriverId] = sessionStorage;
        }
    }
    _onContextStorageTestRunDoneHandler({ testRunId }) {
        if (this.requestPipeline.contextStorage)
            delete this.requestPipeline.contextStorage[testRunId];
    }
    _addEventListeners() {
        this.sessionStorage.on('contextStorageSync', this._onContextStorageSyncHandler.bind(this));
        this.sessionStorage.on('contextStorageTestRunDone', this._onContextStorageTestRunDoneHandler.bind(this));
    }
    async start() {
        (0, debug_loggers_1.nativeAutomationLogger)('starting');
        for (const apiSystem of this.apiSystems)
            await apiSystem.start();
        this._addEventListeners();
        (0, debug_loggers_1.nativeAutomationLogger)('started');
    }
    async dispose() {
        this.requestPipeline.stop();
        await this.requestPipeline.dispose();
        (0, debug_loggers_1.nativeAutomationLogger)('nativeAutomation disposed');
    }
    get apiSystems() {
        return [
            this.requestPipeline,
            this.sessionStorage,
        ];
    }
}
exports.NativeAutomationBase = NativeAutomationBase;
class NativeAutomationMainWindow extends NativeAutomationBase {
    constructor(browserId, windowId, client, options) {
        super(browserId, windowId, client, options, true);
    }
    async start() {
        await super.start();
        await this._client.Target.setDiscoverTargets({ discover: true });
        this._client.Target.on('targetCreated', async ({ targetInfo }) => {
            if (targetInfo.type !== 'page' || targetInfo.targetId === this.windowId)
                return;
            this._resolveNewWindowOpeningPromise = this.emit(cdp_client_1.NEW_WINDOW_OPENED_IN_NATIVE_AUTOMATION, targetInfo);
        });
    }
    async getNewWindowIdInNativeAutomation() {
        if (!this._resolveNewWindowOpeningPromise)
            throw new Error('Cannot get new window id');
        return this._resolveNewWindowOpeningPromise
            .then(res => {
            const windowId = res[0];
            return windowId;
        });
    }
}
exports.NativeAutomationMainWindow = NativeAutomationMainWindow;
class NativeAutomationChildWindow extends NativeAutomationBase {
    constructor(browserId, windowId, client, options) {
        super(browserId, windowId, client, options, false);
    }
}
exports.NativeAutomationChildWindow = NativeAutomationChildWindow;
//# sourceMappingURL=data:application/json;base64,